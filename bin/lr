#!/usr/bin/env python2
'''A tool to hack lightroom catalog and files

Usage: lr [-v|-vv|-vvv] <command> [--help]
       lr [-v|-vv|-vvv] empty-folders <catalog> [--delete] [options]
       lr [-v|-vv|-vvv] to-ascii [--space=<replacement>] [options] [--renames=<renames>] <catalog>
       lr [-v|-vv|-vvv] path to-ascii [--space=<replacement>] <path>

Options:
    --catalog              Path to the lightroom catalog to convert
    --space=<replacement>  Defines the replacement for the space caracter
    --renames=<renames>    Path where to dump the renaming tree [default: renames.json]
    --suffix=<suffix>      Duplicates the catalog before update
    --delete               Deletes matching lines
    --recursive            Loop the operation while elements must be processed
    -v                     Increase program verbosity
'''
import docopt
import logging
import os
import shutil
import sys

import lr.catalog
import lr.modules.to_ascii

def main(argv=None):
    if argv is None:
        argv = sys.argv
    args = docopt.docopt(__doc__, argv[1:])
    if args['-v'] == 1:
        logging.basicConfig(level=logging.WARNING)
    elif args['-v'] == 2:
        logging.basicConfig(level=logging.INFO)
    elif args['-v'] == 3:
        logging.basicConfig(level=logging.DEBUG)
    else:
        logging.basicConfig(level=logging.ERROR)
    replacements = []

    if args['<catalog>']:
        base, ext = os.path.splitext(args['<catalog>'])
        if args['--suffix']:
            base += args['--suffix']
        catalog = base + ext
        if catalog != args['<catalog>']:
            if os.path.exists(catalog):
                os.remove(catalog)
            shutil.copy2(args['<catalog>'], catalog)
        catalog = lr.catalog.Catalog(catalog)
    if args['--space']:
        replacements.append((' ', args['--space']))
    if args['path'] and args['to-ascii']:
        converter = lr.modules.to_ascii.ToAscii(replacements)
        converter.normalize_folders(args['<path>'])
    elif args['to-ascii']:
        converter = lr.modules.to_ascii.ToAscii(replacements)
        converter.to_ascii(catalog)
        converter.merge_folders(catalog)
        converter.dump_actions(args['--renames'])
    elif args['empty-folders'] or args['<command>'] == 'empty-folders':
        def print_msg(template, folders):
            sys.stderr.write(
                '%s\n' % '\n'.join([
                    template % os.path.join(root, path)
                    for _, root, path in empty_folders
                ])
            )
        empty_folders = catalog.empty_folders
        if args['--delete']:
            while empty_folders:
                print_msg('Delete empty folder %s', empty_folders)
                catalog.delete_folders([id for id, _, _ in empty_folders])
                if args['--recursive']:
                    empty_folders = catalog.empty_folders
                else:
                    break
        else:
            print_msg('Folder %s is empty', empty_folders)

if __name__ == '__main__':
    main()
